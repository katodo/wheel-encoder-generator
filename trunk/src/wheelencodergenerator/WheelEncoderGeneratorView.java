/*
 * WheelEncoderGeneratorView.java
 */

package wheelencodergenerator;

import org.jdesktop.application.Action;
import org.jdesktop.application.SingleFrameApplication;
import org.jdesktop.application.FrameView;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JFileChooser;
import javax.swing.KeyStroke;
import javax.swing.SpinnerNumberModel;
import javax.swing.SpinnerModel;
import javax.swing.JOptionPane;
import java.awt.event.*;
import java.awt.print.*;
import java.awt.*;
import java.io.*;

/**
 * The application's main frame.
 */
public class WheelEncoderGeneratorView extends FrameView {

    private WheelEncoder encoder;
    private File encoderFile; // TODO: Med: encapsulate in encoder?
    private JFileFilter wegFileFilter = new JFileFilter();
    public static boolean MAC_OS_X = (System.getProperty("os.name").toLowerCase().startsWith("mac os x"));
    public static int MENU_MASK = Toolkit.getDefaultToolkit().getMenuShortcutKeyMask();

    public WheelEncoderGeneratorView(SingleFrameApplication app) {
        super(app);

        initComponents();

        wegFileFilter.setDescription("Wheel Encoder Generator files");
        wegFileFilter.addType(".weg");

        // Mac OS X vs Windows specific stuff here

        // Initial "load" of new encoder
        newEncoder();
    }

    @Action
    public void showAboutBox() {
        if (aboutBox == null) {
            JFrame mainFrame = WheelEncoderGeneratorApp.getApplication().getMainFrame();
            aboutBox = new WheelEncoderGeneratorAboutBox(mainFrame);
            aboutBox.setLocationRelativeTo(mainFrame);
        }
        WheelEncoderGeneratorApp.getApplication().show(aboutBox);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        mainPanel = new javax.swing.JPanel();
        encoderPanel = new wheelencodergenerator.EncoderPanel();
        controlPanel = new javax.swing.JPanel();
        diameterPanel = new javax.swing.JPanel();
        innerDiameterLabel = new javax.swing.JLabel();
        innerDiameter = new javax.swing.JTextField();
        outerDiameterLabel = new javax.swing.JLabel();
        outerDiameter = new javax.swing.JTextField();
        mmButton = new javax.swing.JRadioButton();
        inchButton = new javax.swing.JRadioButton();
        encoderTabbedPane = new javax.swing.JTabbedPane();
        standardPanel = new javax.swing.JPanel();
        resolutionLabel1 = new javax.swing.JLabel();
        resolutionSpinner = new javax.swing.JSpinner();
        quadratureCheckBox = new javax.swing.JCheckBox();
        indexCheckBox = new javax.swing.JCheckBox();
        absolutePanel = new javax.swing.JPanel();
        grayCodeRadioButton = new javax.swing.JRadioButton();
        binaryCodeRadioButton = new javax.swing.JRadioButton();
        resolutionLabel2 = new javax.swing.JLabel();
        absoluteResolutionComboBox = new javax.swing.JComboBox();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        newMenuItem = new javax.swing.JMenuItem();
        openMenuItem = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        saveMenuItem = new javax.swing.JMenuItem();
        saveAsMenuItem = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        printMenuItem = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        quitMenuItem = new javax.swing.JMenuItem();
        javax.swing.JMenu helpMenu = new javax.swing.JMenu();
        javax.swing.JMenuItem aboutMenuItem = new javax.swing.JMenuItem();
        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        toolBar0 = new javax.swing.JToolBar();
        newButton = new javax.swing.JButton();
        openButton = new javax.swing.JButton();
        toolBar1 = new javax.swing.JToolBar();
        saveButton = new javax.swing.JButton();
        saveAsButton = new javax.swing.JButton();
        exportButton = new javax.swing.JButton();
        toolBar2 = new javax.swing.JToolBar();
        printButton = new javax.swing.JButton();

        mainPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        mainPanel.setName("mainPanel"); // NOI18N
        mainPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                mainPanelMouseClicked(evt);
            }
        });

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(wheelencodergenerator.WheelEncoderGeneratorApp.class).getContext().getResourceMap(WheelEncoderGeneratorView.class);
        encoderPanel.setBackground(resourceMap.getColor("encoderPanel.background")); // NOI18N
        encoderPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder(resourceMap.getColor("encoderPanel.border.highlightColor"), null)); // NOI18N
        encoderPanel.setToolTipText(resourceMap.getString("encoderPanel.toolTipText")); // NOI18N
        encoderPanel.setMinimumSize(new java.awt.Dimension(300, 300));
        encoderPanel.setName("encoderPanel"); // NOI18N
        encoderPanel.setPreferredSize(new java.awt.Dimension(400, 400));
        encoderPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                encoderPanelMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout encoderPanelLayout = new javax.swing.GroupLayout(encoderPanel);
        encoderPanel.setLayout(encoderPanelLayout);
        encoderPanelLayout.setHorizontalGroup(
            encoderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 430, Short.MAX_VALUE)
        );
        encoderPanelLayout.setVerticalGroup(
            encoderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 428, Short.MAX_VALUE)
        );

        controlPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("controlPanel.border.title"))); // NOI18N
        controlPanel.setName("controlPanel"); // NOI18N
        controlPanel.setLayout(new java.awt.BorderLayout());

        diameterPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("diameterPanel.border.title"))); // NOI18N
        diameterPanel.setName("diameterPanel"); // NOI18N
        diameterPanel.setLayout(new java.awt.GridBagLayout());

        innerDiameterLabel.setLabelFor(innerDiameter);
        innerDiameterLabel.setText(resourceMap.getString("innerDiameterLabel.text")); // NOI18N
        innerDiameterLabel.setName("innerDiameterLabel"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        diameterPanel.add(innerDiameterLabel, gridBagConstraints);

        innerDiameter.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        innerDiameter.setText(resourceMap.getString("innerDiameter.text")); // NOI18N
        innerDiameter.setToolTipText(resourceMap.getString("innerDiameter.toolTipText")); // NOI18N
        innerDiameter.setMinimumSize(null);
        innerDiameter.setName("innerDiameter"); // NOI18N
        innerDiameter.setPreferredSize(null);
        innerDiameter.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                innerDiameterFocusLost(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        diameterPanel.add(innerDiameter, gridBagConstraints);

        outerDiameterLabel.setLabelFor(outerDiameter);
        outerDiameterLabel.setText(resourceMap.getString("outerDiameterLabel.text")); // NOI18N
        outerDiameterLabel.setName("outerDiameterLabel"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(10, 5, 5, 5);
        diameterPanel.add(outerDiameterLabel, gridBagConstraints);

        outerDiameter.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        outerDiameter.setText(resourceMap.getString("outerDiameter.text")); // NOI18N
        outerDiameter.setToolTipText(resourceMap.getString("outerDiameter.toolTipText")); // NOI18N
        outerDiameter.setMinimumSize(null);
        outerDiameter.setName("outerDiameter"); // NOI18N
        outerDiameter.setPreferredSize(null);
        outerDiameter.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                outerDiameterFocusLost(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 5, 5, 5);
        diameterPanel.add(outerDiameter, gridBagConstraints);

        buttonGroup1.add(mmButton);
        mmButton.setSelected(true);
        mmButton.setText(resourceMap.getString("mmButton.text")); // NOI18N
        mmButton.setToolTipText(resourceMap.getString("mmButton.toolTipText")); // NOI18N
        mmButton.setName("mmButton"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 10, 0);
        diameterPanel.add(mmButton, gridBagConstraints);

        buttonGroup1.add(inchButton);
        inchButton.setText(resourceMap.getString("inchButton.text")); // NOI18N
        inchButton.setToolTipText(resourceMap.getString("inchButton.toolTipText")); // NOI18N
        inchButton.setEnabled(false);
        inchButton.setName("inchButton"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 10, 0);
        diameterPanel.add(inchButton, gridBagConstraints);

        controlPanel.add(diameterPanel, java.awt.BorderLayout.CENTER);

        encoderTabbedPane.setToolTipText(resourceMap.getString("encoderTabbedPane.toolTipText")); // NOI18N
        encoderTabbedPane.setName("encoderTabbedPane"); // NOI18N
        encoderTabbedPane.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                encoderTabbedPaneMouseClicked(evt);
            }
        });

        standardPanel.setName("standardPanel"); // NOI18N
        standardPanel.setLayout(new java.awt.GridBagLayout());

        resolutionLabel1.setLabelFor(resolutionSpinner);
        resolutionLabel1.setText(resourceMap.getString("resolutionLabel1.text")); // NOI18N
        resolutionLabel1.setName("resolutionLabel1"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 8);
        standardPanel.add(resolutionLabel1, gridBagConstraints);

        resolutionSpinner.setModel((SpinnerModel) resolutionSpinnerModel);
        resolutionSpinner.setToolTipText(resourceMap.getString("resolutionSpinner.toolTipText")); // NOI18N
        resolutionSpinner.setMinimumSize(null);
        resolutionSpinner.setName("resolutionSpinner"); // NOI18N
        resolutionSpinner.setPreferredSize(null);
        resolutionSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                resolutionSpinnerStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 10, 10);
        standardPanel.add(resolutionSpinner, gridBagConstraints);

        quadratureCheckBox.setText(resourceMap.getString("quadratureCheckBox.text")); // NOI18N
        quadratureCheckBox.setToolTipText(resourceMap.getString("quadratureCheckBox.toolTipText")); // NOI18N
        quadratureCheckBox.setName("quadratureCheckBox"); // NOI18N
        quadratureCheckBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                quadratureCheckBoxItemStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        standardPanel.add(quadratureCheckBox, gridBagConstraints);

        indexCheckBox.setText(resourceMap.getString("indexCheckBox.text")); // NOI18N
        indexCheckBox.setToolTipText(resourceMap.getString("indexCheckBox.toolTipText")); // NOI18N
        indexCheckBox.setName("indexCheckBox"); // NOI18N
        indexCheckBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                indexCheckBoxItemStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 10, 0);
        standardPanel.add(indexCheckBox, gridBagConstraints);

        encoderTabbedPane.addTab(resourceMap.getString("standardPanel.TabConstraints.tabTitle"), standardPanel); // NOI18N

        absolutePanel.setName("absolutePanel"); // NOI18N
        absolutePanel.setLayout(new java.awt.GridBagLayout());

        buttonGroup2.add(grayCodeRadioButton);
        grayCodeRadioButton.setSelected(true);
        grayCodeRadioButton.setText(resourceMap.getString("grayCodeRadioButton.text")); // NOI18N
        grayCodeRadioButton.setToolTipText(resourceMap.getString("grayCodeRadioButton.toolTipText")); // NOI18N
        grayCodeRadioButton.setName("grayCodeRadioButton"); // NOI18N
        grayCodeRadioButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                grayCodeRadioButtonMouseReleased(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.ipadx = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        absolutePanel.add(grayCodeRadioButton, gridBagConstraints);

        buttonGroup2.add(binaryCodeRadioButton);
        binaryCodeRadioButton.setText(resourceMap.getString("binaryCodeRadioButton.text")); // NOI18N
        binaryCodeRadioButton.setToolTipText(resourceMap.getString("binaryCodeRadioButton.toolTipText")); // NOI18N
        binaryCodeRadioButton.setName("binaryCodeRadioButton"); // NOI18N
        binaryCodeRadioButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                binaryCodeRadioButtonMouseReleased(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 10, 0);
        absolutePanel.add(binaryCodeRadioButton, gridBagConstraints);

        resolutionLabel2.setLabelFor(absoluteResolutionComboBox);
        resolutionLabel2.setText(resourceMap.getString("resolutionLabel2.text")); // NOI18N
        resolutionLabel2.setName("resolutionLabel2"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 8);
        absolutePanel.add(resolutionLabel2, gridBagConstraints);

        absoluteResolutionComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "2", "4", "8", "16", "32", "64", "128", "256", "512", "1024", "2048", "4096" }));
        absoluteResolutionComboBox.setSelectedIndex(3);
        absoluteResolutionComboBox.setToolTipText(resourceMap.getString("absoluteResolutionComboBox.toolTipText")); // NOI18N
        absoluteResolutionComboBox.setMinimumSize(null);
        absoluteResolutionComboBox.setName("absoluteResolutionComboBox"); // NOI18N
        absoluteResolutionComboBox.setPreferredSize(null);
        absoluteResolutionComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                absoluteResolutionComboBoxItemStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 10, 10);
        absolutePanel.add(absoluteResolutionComboBox, gridBagConstraints);

        encoderTabbedPane.addTab(resourceMap.getString("absolutePanel.TabConstraints.tabTitle"), absolutePanel); // NOI18N

        controlPanel.add(encoderTabbedPane, java.awt.BorderLayout.PAGE_START);

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(encoderPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 434, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(controlPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(encoderPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 432, Short.MAX_VALUE)
                    .addComponent(controlPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        menuBar.setName("menuBar"); // NOI18N
        menuBar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                menuBarMouseClicked(evt);
            }
        });

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(wheelencodergenerator.WheelEncoderGeneratorApp.class).getContext().getActionMap(WheelEncoderGeneratorView.class, this);
        fileMenu.setAction(actionMap.get("newEncoder")); // NOI18N
        fileMenu.setText(resourceMap.getString("fileMenu.text")); // NOI18N
        fileMenu.setName("fileMenu"); // NOI18N

        newMenuItem.setAction(actionMap.get("newEncoder")); // NOI18N
        newMenuItem.setText(resourceMap.getString("newMenuItem.text")); // NOI18N
        newMenuItem.setName("newMenuItem"); // NOI18N
        fileMenu.add(newMenuItem);
        newMenuItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_N,MENU_MASK));

        openMenuItem.setAction(actionMap.get("openEncoder")); // NOI18N
        openMenuItem.setText(resourceMap.getString("openMenuItem.text")); // NOI18N
        openMenuItem.setName("openMenuItem"); // NOI18N
        fileMenu.add(openMenuItem);
        openMenuItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_O,MENU_MASK));

        jSeparator3.setName("jSeparator3"); // NOI18N
        fileMenu.add(jSeparator3);

        saveMenuItem.setAction(actionMap.get("saveEncoder")); // NOI18N
        saveMenuItem.setText(resourceMap.getString("saveMenuItem.text")); // NOI18N
        saveMenuItem.setName("saveMenuItem"); // NOI18N
        fileMenu.add(saveMenuItem);
        saveMenuItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_S,MENU_MASK));

        saveAsMenuItem.setAction(actionMap.get("saveEncoderAs")); // NOI18N
        saveAsMenuItem.setText(resourceMap.getString("saveAsMenuItem.text")); // NOI18N
        saveAsMenuItem.setName("saveAsMenuItem"); // NOI18N
        fileMenu.add(saveAsMenuItem);

        jSeparator1.setName("jSeparator1"); // NOI18N
        fileMenu.add(jSeparator1);

        printMenuItem.setAction(actionMap.get("printEncoder")); // NOI18N
        printMenuItem.setText(resourceMap.getString("printMenuItem.text")); // NOI18N
        printMenuItem.setName("printMenuItem"); // NOI18N
        fileMenu.add(printMenuItem);
        printMenuItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_P,MENU_MASK));

        jSeparator2.setName("jSeparator2"); // NOI18N
        if (!MAC_OS_X) {
            fileMenu.add(jSeparator2);

            quitMenuItem.setText(resourceMap.getString("quitMenuItem.text")); // NOI18N
            quitMenuItem.setName("quitMenuItem"); // NOI18N
            quitMenuItem.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    quitMenuItemActionPerformed(evt);
                }
            });
            fileMenu.add(quitMenuItem);
        }

        menuBar.add(fileMenu);

        helpMenu.setText(resourceMap.getString("helpMenu.text")); // NOI18N
        helpMenu.setName("helpMenu"); // NOI18N

        aboutMenuItem.setAction(actionMap.get("showAboutBox")); // NOI18N
        aboutMenuItem.setName("aboutMenuItem"); // NOI18N
        helpMenu.add(aboutMenuItem);

        if(!MAC_OS_X) {
            menuBar.add(helpMenu);
        }

        toolBar0.setRollover(true);
        toolBar0.setName("toolBar0"); // NOI18N

        newButton.setAction(actionMap.get("newEncoder")); // NOI18N
        newButton.setIcon(resourceMap.getIcon("newButton.icon")); // NOI18N
        newButton.setText(resourceMap.getString("newButton.text")); // NOI18N
        newButton.setToolTipText(resourceMap.getString("newButton.toolTipText")); // NOI18N
        newButton.setFocusable(false);
        newButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        newButton.setName("newButton"); // NOI18N
        newButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        toolBar0.add(newButton);

        openButton.setAction(actionMap.get("openEncoder")); // NOI18N
        openButton.setIcon(resourceMap.getIcon("openButton.icon")); // NOI18N
        openButton.setText(resourceMap.getString("openButton.text")); // NOI18N
        openButton.setToolTipText(resourceMap.getString("openButton.toolTipText")); // NOI18N
        openButton.setFocusable(false);
        openButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        openButton.setName("openButton"); // NOI18N
        openButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        toolBar0.add(openButton);

        toolBar1.setRollover(true);
        toolBar1.setName("toolBar1"); // NOI18N

        saveButton.setAction(actionMap.get("saveEncoder")); // NOI18N
        saveButton.setIcon(resourceMap.getIcon("saveButton.icon")); // NOI18N
        saveButton.setText(resourceMap.getString("saveButton.text")); // NOI18N
        saveButton.setToolTipText(resourceMap.getString("saveButton.toolTipText")); // NOI18N
        saveButton.setFocusable(false);
        saveButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        saveButton.setName("saveButton"); // NOI18N
        saveButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        toolBar1.add(saveButton);

        saveAsButton.setAction(actionMap.get("saveEncoderAs")); // NOI18N
        saveAsButton.setIcon(resourceMap.getIcon("saveAsButton.icon")); // NOI18N
        saveAsButton.setText(resourceMap.getString("saveAsButton.text")); // NOI18N
        saveAsButton.setToolTipText(resourceMap.getString("saveAsButton.toolTipText")); // NOI18N
        saveAsButton.setFocusable(false);
        saveAsButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        saveAsButton.setName("saveAsButton"); // NOI18N
        saveAsButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        toolBar1.add(saveAsButton);

        exportButton.setIcon(resourceMap.getIcon("exportButton.icon")); // NOI18N
        exportButton.setText(resourceMap.getString("exportButton.text")); // NOI18N
        exportButton.setToolTipText(resourceMap.getString("exportButton.toolTipText")); // NOI18N
        exportButton.setFocusable(false);
        exportButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        exportButton.setName("exportButton"); // NOI18N
        exportButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        toolBar1.add(exportButton);

        toolBar0.add(toolBar1);

        toolBar2.setRollover(true);
        toolBar2.setName("toolBar2"); // NOI18N

        printButton.setAction(actionMap.get("printEncoder")); // NOI18N
        printButton.setIcon(resourceMap.getIcon("printButton.icon")); // NOI18N
        printButton.setText(resourceMap.getString("printButton.text")); // NOI18N
        printButton.setToolTipText(resourceMap.getString("printButton.toolTipText")); // NOI18N
        printButton.setFocusable(false);
        printButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        printButton.setName("printButton"); // NOI18N
        printButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        toolBar2.add(printButton);

        toolBar0.add(toolBar2);

        setComponent(mainPanel);
        setMenuBar(menuBar);
        setToolBar(toolBar0);
    }// </editor-fold>//GEN-END:initComponents

    private void quadratureCheckBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_quadratureCheckBoxItemStateChanged
        encoder.setQuadratureTrack(evt.getStateChange() == ItemEvent.SELECTED);
        showPreview();
    }//GEN-LAST:event_quadratureCheckBoxItemStateChanged

    private void outerDiameterFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_outerDiameterFocusLost
        showPreview();
    }//GEN-LAST:event_outerDiameterFocusLost

    private void innerDiameterFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_innerDiameterFocusLost
        showPreview();
    }//GEN-LAST:event_innerDiameterFocusLost

    private void indexCheckBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_indexCheckBoxItemStateChanged
        encoder.setIndexTrack(evt.getStateChange() == ItemEvent.SELECTED);
        showPreview();
    }//GEN-LAST:event_indexCheckBoxItemStateChanged

    private void encoderPanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_encoderPanelMouseClicked
        showPreview();
    }//GEN-LAST:event_encoderPanelMouseClicked

    private void mainPanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mainPanelMouseClicked
        showPreview();
    }//GEN-LAST:event_mainPanelMouseClicked

    private void menuBarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menuBarMouseClicked
        showPreview();
    }//GEN-LAST:event_menuBarMouseClicked

    private void resolutionSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_resolutionSpinnerStateChanged
        showPreview();
    }//GEN-LAST:event_resolutionSpinnerStateChanged

    private void absoluteResolutionComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_absoluteResolutionComboBoxItemStateChanged
        showPreview();
    }//GEN-LAST:event_absoluteResolutionComboBoxItemStateChanged

    private void grayCodeRadioButtonMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_grayCodeRadioButtonMouseReleased
        showPreview();
    }//GEN-LAST:event_grayCodeRadioButtonMouseReleased

    private void binaryCodeRadioButtonMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_binaryCodeRadioButtonMouseReleased
        showPreview();
    }//GEN-LAST:event_binaryCodeRadioButtonMouseReleased

    private void encoderTabbedPaneMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_encoderTabbedPaneMouseClicked
        showPreview();
    }//GEN-LAST:event_encoderTabbedPaneMouseClicked

    private void quitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quitMenuItemActionPerformed
        if(promptSaveFirst()) {
            System.exit(0);
        }
    }//GEN-LAST:event_quitMenuItemActionPerformed

    /* setWheelEncoder
     *
     * Set up the GUI to reflect the settings in the WheelEncoder object
     * Used for loading or opening new encoder.
     */
    private void setWheelEncoder(WheelEncoder e)
    {
        encoder = e;
        // Setup all the interface stuff based on contents of the
        // encoder object
        innerDiameter.setText(Integer.toString(encoder.getInnerDiameter()));
        outerDiameter.setText(Integer.toString(encoder.getOuterDiameter()));
        if (encoder.getType() == WheelEncoder.STANDARD) {
            resolutionSpinner.getModel().setValue(encoder.getResolution());
            quadratureCheckBox.setSelected(encoder.hasQuadratureTrack());
            indexCheckBox.setSelected(encoder.hasIndexTrack());
            encoderTabbedPane.setSelectedIndex(encoderTabbedPane.indexOfTab("Standard"));
        }
        else if (encoder.getType() == WheelEncoder.ABSOLUTE) {
            encoderTabbedPane.setSelectedIndex(encoderTabbedPane.indexOfTab("Absolute"));
            if (encoder.getNumbering() == WheelEncoder.GRAY) {
                grayCodeRadioButton.setSelected(true);
            }
            else if (encoder.getNumbering() == WheelEncoder.BINARY) {
                binaryCodeRadioButton.setSelected(true);
            }
            absoluteResolutionComboBox.setSelectedIndex(encoder.getResolution()-1);
        }
    }

    private boolean errorCheck()
    {
        boolean result=true;
        
        try {
            if ( Integer.parseInt(innerDiameter.getText()) >= Integer.parseInt(outerDiameter.getText()) ) {
                outerDiameterLabel.setForeground(Color.red);
                innerDiameterLabel.setForeground(Color.red);
                result = false;
            }
            else {
                outerDiameterLabel.setForeground(Color.black);
                innerDiameterLabel.setForeground(Color.black);
            }

            // Is resolution even (ok), or odd (not ok) ?
            if ( (Integer.parseInt(resolutionSpinner.getModel().getValue().toString()) % 2) > 0 ) {
                resolutionLabel1.setForeground(Color.red);
                result = false;
            }
            else {
                resolutionLabel2.setForeground(Color.black);
            }
        } catch (NumberFormatException e) {
            result = false;
            // TODO: Med: input validator for numbers instead
            JOptionPane.showMessageDialog(getFrame(),
                    "Numbers must be non-zero", "Error",
                    JOptionPane.ERROR_MESSAGE );
        }

        // Disable functionality (print, etc) if something is jacked up
        printMenuItem.setEnabled(result);
        printButton.setEnabled(result);
        return result;
    }

    @Action
    public void showPreview()
    {
        if (errorCheck()) {
            encoder.setInnerDiameter(Integer.parseInt(innerDiameter.getText()));
            encoder.setOuterDiameter(Integer.parseInt(outerDiameter.getText()));

            // Absolute Encoder
            if (encoderTabbedPane.getSelectedIndex() == encoderTabbedPane.indexOfTab("Absolute")) {
                encoder.setType(WheelEncoder.ABSOLUTE);
                if (grayCodeRadioButton.isSelected() == true)
                    encoder.setNumbering(WheelEncoder.GRAY);
                else if (binaryCodeRadioButton.isSelected() == true)
                    encoder.setNumbering(WheelEncoder.BINARY);

                // ComboBox menu is set up so that # of tracks corresponds to selected index + 1
                encoder.setResolution(absoluteResolutionComboBox.getSelectedIndex()+1);
                //System.out.println("Track count: " + Integer.toString(encoder.getResolution()) + "\n");
            }
            else if (encoderTabbedPane.getSelectedIndex() == encoderTabbedPane.indexOfTab("Standard")) {
                encoder.setType(WheelEncoder.STANDARD);
                encoder.setResolution(Integer.parseInt(resolutionSpinner.getModel().getValue().toString()));
            }
            encoderPanel.repaint();
        }
        // Since showPreview() gets called anytime there's a change to the
        // encoder--load, save, modify, etc.--why not enable/disable the save
        // menu items here?
        if (encoder.isChanged()) {
            saveMenuItem.setEnabled(true);
            saveButton.setEnabled(true);
        } else {
            saveMenuItem.setEnabled(false);
            saveButton.setEnabled(false);
        }
    }

   

    @Action
    public void printEncoder() {
        PrinterJob job = PrinterJob.getPrinterJob();
        job.setPrintable(encoderPanel);
        boolean doPrint = job.printDialog();
        if (doPrint) {
            try {
                job.print();
            } catch (PrinterException e) {
                // The job did not successfully complete
            }
        }
        
    }

     /* checkSaveFirst
     *
     * Check to see if encoder has been saved. If not, save it.
     * If cancel, not only don't save it, but return false.
     * If don't save, then return true and don't save
     */
    private boolean promptSaveFirst()
    {
        boolean result=true;

        if (encoder != null) { // null if first time through
            if (encoder.isChanged()) {
                int response = JOptionPane.showConfirmDialog(getFrame(),
                    "This encoder has changed. Save?", "Save?",
                    JOptionPane.YES_NO_CANCEL_OPTION,
                    JOptionPane.QUESTION_MESSAGE );
                if (response == JOptionPane.YES_OPTION) {
                    result = doSave();
                } else if (response == JOptionPane.CANCEL_OPTION) {
                    result = false;
                } else if (response == JOptionPane.NO_OPTION) {
                    result = true;
                }
            }
        }
        return result;
    }


    @Action
    public void newEncoder() {
        if (promptSaveFirst()) {
            setWheelEncoder(new WheelEncoder());
            encoderPanel.setWheelEncoder(encoder);
            showPreview();
            // TODO: Low: Encapsulate encoderFile setting and title bar in one method
            encoderFile = null;
            getFrame().setTitle("Untitled - " + appTitle);
        }
    }

    private File promptFileSave()
    {
        File file = null;

        JFileChooser fc = new JFileChooser();
        fc.setFileFilter(wegFileFilter);
        int option = fc.showSaveDialog(getFrame());
        if (option == JFileChooser.APPROVE_OPTION) {
            File f = fc.getSelectedFile();
            if (f.exists()) {
                int response = JOptionPane.showConfirmDialog(getFrame(),
                    "Replace existing file?", "Replace?",
                    JOptionPane.YES_NO_OPTION,
                    JOptionPane.QUESTION_MESSAGE );
                if (response == JOptionPane.YES_OPTION) {
                    file = f;
                }
            } else {
                file = f;
            }
        }

        return file;
    }


    private boolean doSave()
    {
        boolean outcome = true;

        if (encoderFile == null) {
            File file = promptFileSave();
            if (file != null) {
                encoderFile = file;
                outcome = true;
            } else {
                outcome = false;
            }
        }

        // if all's well so far, outcome == true
        // if save file prompt cancelled, outcome == false
        if (outcome) {
            try {
                encoder.save(encoderFile);
                getFrame().setTitle(encoderFile.getName() + " - " + appTitle);
                outcome = true;
            }
            catch (IOException e) {
                outcome = false;
                JOptionPane.showMessageDialog(getFrame(),
                    "Error saving file", "File Save Error",
                    JOptionPane.ERROR_MESSAGE );
            }
        }
        
        return outcome;
    }

    private boolean doOpen()
    {
        boolean outcome = false;
        JFileChooser fc = new JFileChooser();
        fc.setFileFilter(wegFileFilter);
        int option = fc.showOpenDialog(getFrame());
        if (option == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            try {
                WheelEncoder enc = new WheelEncoder(file);
                encoderFile = file;
                setWheelEncoder(enc);
                encoderPanel.setWheelEncoder(encoder);
                getFrame().setTitle(encoderFile.getName() + " - " + appTitle);
                showPreview();
                outcome = true;
            } catch (IOException e) {
                JOptionPane.showMessageDialog(getFrame(),
                    "Error reading file", "File Read Error",
                    JOptionPane.ERROR_MESSAGE );
                outcome = false;
            }
        } else {
            outcome = false;
        }
        return outcome;
    }

    @Action
    public void saveEncoder() {
        doSave();
    }

    @Action
    public void saveEncoderAs() {
        File temp = encoderFile; // store old file in case of failure
        encoderFile = null; // fake out doSave() to force prompt

        if (doSave() == false)
            encoderFile = temp; // restore old file
    }

    @Action
    public void openEncoder() {
        if (promptSaveFirst()) {
            doOpen();
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel absolutePanel;
    private javax.swing.JComboBox absoluteResolutionComboBox;
    private javax.swing.JRadioButton binaryCodeRadioButton;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JPanel controlPanel;
    private javax.swing.JPanel diameterPanel;
    private wheelencodergenerator.EncoderPanel encoderPanel;
    private javax.swing.JTabbedPane encoderTabbedPane;
    private javax.swing.JButton exportButton;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JRadioButton grayCodeRadioButton;
    private javax.swing.JRadioButton inchButton;
    private javax.swing.JCheckBox indexCheckBox;
    private javax.swing.JTextField innerDiameter;
    private javax.swing.JLabel innerDiameterLabel;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JRadioButton mmButton;
    private javax.swing.JButton newButton;
    private javax.swing.JMenuItem newMenuItem;
    private javax.swing.JButton openButton;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JTextField outerDiameter;
    private javax.swing.JLabel outerDiameterLabel;
    private javax.swing.JButton printButton;
    private javax.swing.JMenuItem printMenuItem;
    private javax.swing.JCheckBox quadratureCheckBox;
    private javax.swing.JMenuItem quitMenuItem;
    private javax.swing.JLabel resolutionLabel1;
    private javax.swing.JLabel resolutionLabel2;
    private javax.swing.JSpinner resolutionSpinner;
    private javax.swing.JButton saveAsButton;
    private javax.swing.JMenuItem saveAsMenuItem;
    private javax.swing.JButton saveButton;
    private javax.swing.JMenuItem saveMenuItem;
    private javax.swing.JPanel standardPanel;
    private javax.swing.JToolBar toolBar0;
    private javax.swing.JToolBar toolBar1;
    private javax.swing.JToolBar toolBar2;
    // End of variables declaration//GEN-END:variables

    private SpinnerNumberModel resolutionSpinnerModel = new SpinnerNumberModel(16, 4, 36000, 2);
    private SpinnerNumberModel absoluteSpinnerModel = new SpinnerNumberModel(4, 2, 8, 1);
    private String appTitle = org.jdesktop.application.Application.getInstance(wheelencodergenerator.WheelEncoderGeneratorApp.class).getContext().getResourceMap(WheelEncoderGeneratorApp.class).getString("Application.title");
    private JDialog aboutBox;
}
